
include_directories(
        .
        ${PROJECT_SOURCE_DIR}/lib
        ${PROJECT_SOURCE_DIR}/lib/io
        ../lib/dervice
)
#寻找sh
find_program(runzsh "/usr/bin/zsh")
#C语言编译参数
file(GLOB_RECURSE src_lists
        ./*.c
        ./*.S
        ../lib/io/*.S
        ../lib/dervice/*c
        )

file(GLOB writeBin
        ../write_bin.sh
        )


set(USE_C_FLAGS "-c -g -m32 -fno-builtin")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${USE_C_FLAGS}")

#NASM的编译参数
#set(CMAKE_ASM_NASM_FLAGS '-f elf')
#set(CMAKE_ASM_NASM_COMPILE_OBJECT "<CMAKE_ASM_NASM_COMPILER> <INCLUDES> <FLAGS> -f ${CMAKE_ASM_NASM_OBJECT_FORMAT}   -o <OBJECT> <SOURCE>")
set(CMAKE_ASM_NASM_OBJECT_FORMAT elf)
set(CMAKE_ASM_NASM_SOURCE_FILE_EXTENSIONS nasm asm S)
ENABLE_LANGUAGE(ASM_NASM)

#设置连接的相关参数
set(USE_LINK_FLAGS "-Ttext 0xc0001500 -melf_i386 -nostartfiles -e main  -Map=${PROJECT_SOURCE_DIR}/bin/a.map")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${USE_LINK_FLAGS}")

#修改链接的代码
set(CMAKE_C_LINK_EXECUTABLE "ld ${CMAKE_EXE_LINKER_FLAGS} <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")

#输出kernel.bin文件重定向
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

add_executable(kernel ${src_lists})

set_target_properties(kernel
        PROPERTIES
        LINKER_LANGUAGE C
        SUFFIX .bin
        )

target_link_libraries(kernel timer io)

#execute_process(COMMAND  ${runzsh} ${writeBin}
#
#        )